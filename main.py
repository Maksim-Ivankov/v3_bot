# —Ç–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç, —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
# —Ç–æ—á–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—É–ø–æ –Ω–∞ 1,5 —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö. –ù–∞ –±–æ–ª—å—à–∏—Ö –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª, —Ö–æ—Ç—è —Å–ª–µ–¥–æ–≤–∞–ª–æ –±—ã. –ê –ø–æ—á–µ–º—É –±—ã –∏ –Ω–µ—Ç. 
# –¥–æ–¥–µ–ª–∞—é –±–æ—Ç–∞ –∏ –∑–∞–ø—É—â—É –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ –Ω–∞ –ø–∞—Ä—É –¥–Ω–µ–π.

import matplotlib.pyplot as plt
import pandas as pd
import requests
import websockets
import asyncio
import json
import time
from time import gmtime, strftime
import numpy as np
import statsmodels.api as sm
import warnings
from binance.um_futures import UMFutures
from config import TG_API,TG_ID,TG_NAME_BOT,key,secret
warnings.filterwarnings("ignore")
import os
import glob

symbol = '' # –ø–æ –∫–∞–∫–æ–π –ø–∞—Ä–µ —Ç–æ—Ä–≥—É–µ–º
width = 0.6 # –®–∏—Ä–∏–Ω–∞ —Ç–µ–ª–∞ —Å–≤–µ—á–∏
width2 = 0.05 # –®–∏—Ä–∏–Ω–∞ —Ö–≤–æ—Å—Ç–∞, —à–ø–∏–ª—è
timeout = time.time() + 60*60*12  # –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å–∫—Ä–∏–ø—Ç
TF = '15m' # —Ç–∞–π–º—Ñ—Ä–µ–π–º
wait_time = 15 # —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∂–¥–∞—Ç—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã —Å –±–∏—Ä–∂–∏
TP = 0.002 # –¢–µ–π–∫ –ø—Ä–æ—Ñ–∏—Ç, –ø—Ä–æ—Ü–µ–Ω—Ç
SL = 0.002 # –°—Ç–æ–ø –ª–æ—Å—Å, –ø—Ä–æ—Ü–µ–Ω—Ç
DEPO = 100 # –î–µ–ø–æ–∑–∏—Ç
Leverage = 20 # —Ç–æ—Ä–≥–æ–≤–æ–µ –ø–ª–µ—á–æ
DEPOSIT = DEPO # –ª–µ–Ω—å –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å
open_position = False # —Ñ–ª–∞–≥, —Å—Ç–æ–∏–º –≤ –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ –Ω–µ—Ç
commission_maker = 0.001 # –∫–æ–º–∏—Å—Å–∏—è –∞ –≤—Ö–æ–¥
comission_taker = 0.002 # –∫–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã—Ö–¥
name_bot = 'V_3' # –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–≥
volume = 30 # —Å–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∏—Ä–∂–µ
canal_max = 0.85 # –í–µ—Ä—Ö –∫–∞–Ω–∞–ª–∞
canal_min = 0.15 # –ù–∏–∑ –∫–∞–Ω–∞–ª–∞
corner_short = 10 # –£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ —à–æ—Ä—Ç
corner_long = 10 # –£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ –ª–æ–Ω–≥
candle_coin_min = 200000 # –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ —Å–≤–µ—á–∫—É
candle_coin_max = 500000 # –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ —Å–≤–µ—á–∫—É
rigime_gen_df = 2 # 1 - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—ã –≤ —Ñ–∞–π–ª, 2 - –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—ã –∏–∑ —Ñ–∞–π–ª–∞
mydir_worker = 'dev/df/worker/'
mydir_5min = 'dev/df/5min/'

data_value = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n–¢–∞–π–º—Ñ—Ä–µ–π–º - '+str(TF)+'\n–¢–µ–π–∫ –ø—Ä–æ—Ñ–∏—Ç - '+str(TP)+'\n–°—Ç–æ–ø –ª–æ—Å—Å - '+str(SL)+'\n–ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç - '+str(DEPO)+'\n–ü–ª–µ—á–æ - '+str(Leverage)+'\n–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ - '+str(name_bot)+'\n–í–µ—Ä—Ö –∫–∞–Ω–∞–ª–∞ - '+str(canal_max)+'\n–ù–∏–∑ –∫–∞–Ω–∞–ª–∞ - '+str(canal_min)+'\n–£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ —à–æ—Ä—Ç - '+str(corner_short)+'\n–£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ –ª–æ–Ω–≥ - '+str(corner_long)+'\n–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –º–∏–Ω - '+str(candle_coin_min)+'\n–û–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤ –º–∞–∫—Å - '+str(candle_coin_max)

day_trade = round((wait_time*volume)/(60*24),1)
open_sl = False # —Ñ–ª–∞–≥ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
price_trade = 0
signal_trade = ''
coin_trade = ''
value_trade = 0
coin_mas_10 = []
profit = 0
loss = 0
commission = 0
data_numbers = []
count_long_take = 0
count_short_take = 0
count_long_loss = 0
count_short_loss = 0

client = UMFutures(key=key, secret=secret)

name_log = name_bot+'_log.txt'
def logger(msg):
    f = open(name_log,'a',encoding='utf-8')
    f.write('\n'+time.strftime("%d.%m.%Y | %H:%M:%S | ", time.localtime())+msg)
    f.close()
logger('------------------------------------------------------------')
logger('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–∞–±–æ—Ç—É')
logger(data_value)

# –ü–æ–ª—É—á–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ n —Å–≤–µ—á–µ–π –ø–æ n –º–∏–Ω—É—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ –¥–∞–Ω–Ω—ã–µ –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º
def get_futures_klines(symbol,TF,volume):
    x = requests.get('https://binance.com/fapi/v1/klines?symbol='+symbol.lower()+'&limit='+str(volume)+'&interval='+TF)
    df=pd.DataFrame(x.json())
    df.columns=['open_time','open','high','low','close','volume','close_time','d1','d2','d3','d4','d5']
    df=df.drop(['d1','d2','d3','d4','d5'],axis=1)
    df['open']=df['open'].astype(float)
    df['high']=df['high'].astype(float)
    df['low']=df['low'].astype(float)
    df['close']=df['close'].astype(float)
    df['volume']=df['volume'].astype(float)
    return(df) # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

# –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –Ω–∞ –±–∏—Ä–∂–µ
def get_top_coin():
    data = client.ticker_24hr_price_change()
    change={}
    coin={}
    coin_mas = []
    coin_mas_10 = []
    for i in data:
        change[i['symbol']] = float(i['priceChangePercent'])
    coin = dict(sorted(change.items(), key=lambda item: item[1],reverse=True))
    for key in coin:
        coin_mas.append(key)
    for x,result in enumerate(coin_mas):
        if x==10:
            break
        coin_mas_10.append(result)
    return coin_mas_10

coin_mas_10 = get_top_coin()
# –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –¥–æ–ª–∂–Ω—ã –∑–∞–π—Ç–∏
def get_trade_volume(get_symbol_price):
    volume = round(float(DEPOSIT)*float(Leverage)/float(get_symbol_price))
    return float(volume)

# –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–∞ –∏ –ø—Ä–∏–Ω—Ç—É–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
def prt(message):
    # print(message)
    url = 'https://api.telegram.org/bot{}/sendMessage'.format(TG_API)
    data = {
        'chat_id': TG_ID,
        'text': message
    }
    response = requests.post(url, data=data)

prt(f'–†–æ–±–æ—Ç {name_bot} –∑–∞–ø—É—â–µ–Ω!\n{data_value}')




# -------------------------------------- –ò–ù–î–ò–ö–ê–¢–û–†–´ --------------------------------------

# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
def indATR(source_DF,n):
    df = source_DF.copy()
    df['H-L']=abs(df['high']-df['low'])
    df['H-PC']=abs(df['high']-df['close'].shift(1))
    df['L-PC']=abs(df['low']-df['close'].shift(1))
    df['TR']=df[['H-L','H-PC','L-PC']].max(axis=1,skipna=False)
    df['ATR'] = df['TR'].rolling(n).mean()
    df_temp = df.drop(['H-L','H-PC','L-PC'],axis=1)
    return df_temp

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∫–ª–æ–Ω —Ü–µ–Ω–æ–≤–æ–π –ª–∏–Ω–∏–∏
def indSlope(series,n):
    array_sl = [j*0 for j in range(n-1)]
    for j in range(n,len(series)+1):
        y = series[j-n:j]
        x = np.array(range(n))
        x_sc = (x - x.min())/(x.max() - x.min())
        y_sc = (y - y.min())/(y.max() - y.min())
        x_sc = sm.add_constant(x_sc)
        model = sm.OLS(y_sc,x_sc)
        results = model.fit()
        array_sl.append(results.params[-1])
    slope_angle = (np.rad2deg(np.arctan(np.array(array_sl))))
    return np.array(slope_angle)

# –Ω–∞–π—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º
def isLCC(DF,i):
    df=DF.copy()
    LCC=0
    if df['close'][i]<=df['close'][i+1] and df['close'][i]<=df['close'][i-1] and df['close'][i+1]>df['close'][i-1]:
        #–Ω–∞–π–¥–µ–Ω–æ –î–Ω–æ
        LCC = i-1
    return LCC

# –Ω–∞–π—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
def isHCC(DF,i):
    df=DF.copy()
    HCC=0
    if df['close'][i]>=df['close'][i+1] and df['close'][i]>=df['close'][i-1] and df['close'][i+1]<df['close'][i-1]:
        #–Ω–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—à–∏–Ω–∞
        HCC = i
    return HCC

# —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ñ—Ä–µ–π–º –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
def PrepareDF(DF):
    ohlc = DF.iloc[:,[0,1,2,3,4,5]]
    ohlc.columns = ["date","open","high","low","close","volume"]
    ohlc=ohlc.set_index('date')
    df = indATR(ohlc,14).reset_index()
    df['slope'] = indSlope(df['close'],5)
    df['channel_max'] = df['high'].rolling(10).max() # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–∞–Ω–∞–ª–∞
    df['channel_min'] = df['low'].rolling(10).min() # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∏–∂–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–∞–Ω–∞–ª–∞
    df['position_in_channel'] = (df['close']-df['channel_min']) / (df['channel_max']-df['channel_min']) # —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤—ã—à–µ —Å–µ—Ä–µ–¥–∏–Ω—ã –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –Ω–∏–∂–µ
    df = df.set_index('date')
    df = df.reset_index()
    return(df)

# -------------------------------------- –ò–ù–î–ò–ö–ê–¢–û–†–´ --------------------------------------
# -------------------------------------- –¢–û–†–ì–û–í–õ–Ø --------------------------------------

# –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ª–æ–Ω–≥ –∏–ª–∏ —à–æ—Ä—Ç
def open_position(trend,value,price):
    global open_sl
    global price_trade
    global signal_trade
    global coin_trade
    global value_trade
    global take_profit_price
    global stop_loss_price
    price_trade = price
    signal_trade = trend
    coin_trade = symbol
    value_trade = value
    open_sl = True
    take_profit_price = get_take_profit(trend,price_trade) # –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç—ç–π–∫ –ø—Ä–æ—Ñ–∏—Ç–∞
    stop_loss_price = get_stop_loss(trend,price_trade) # –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Å—Ç–æ–ø –ª–æ—Å—Å–∞
    print(f'–¢–ï–ô–ö - {take_profit_price}')
    print(f'–°–¢–û–ü - {stop_loss_price}')
    print(f'–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞. –ú–æ–Ω–µ—Ç–∞ - {symbol} | –ó–∞—à–ª–∏ –≤ {trend} | –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ - {price_trade}')
    prt(f'üöÄ -----–°–¥–µ–ª–∫–∞----- üöÄ\n–ë–æ—Ç - {name_bot}\n–ú–æ–Ω–µ—Ç–∞ - {symbol}\n–ó–∞—à–ª–∏ –≤ {trend}\n–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ - {price_trade}')
    logger(f'–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞. –ú–æ–Ω–µ—Ç–∞ - {symbol} | –ó–∞—à–ª–∏ –≤ {trend} | –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ - {price_trade}')

def get_take_profit(trend,price_trade): # –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç–µ–π–∫ –ø—Ä–æ—Ñ–∏—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if trend == 'long':
        return float(float(price_trade)*(1+float(TP)))
    if trend == 'short':
        return float(float(price_trade)*(1-float(TP)))
def get_stop_loss(trend,price_trade): # –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Å—Ç–æ–ø –ª–æ—Å—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if trend == 'long':
        return float(float(price_trade)*(1-float(SL)))
    if trend == 'short':
        return float(float(price_trade)*(1+float(SL)))

# –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
def close_trade(status,procent):
    global DEPO
    global open_sl
    global profit
    global loss
    global commission
    if status == '+': # –µ—Å–ª–∏ –∑–∞–∫—Ä—ã–ª–∏ –≤ –ø–ª—é—Å
        profit = profit + Leverage*DEPO*procent
        commission = commission + Leverage*DEPO*(commission_maker+comission_taker)
        DEPO = DEPO + Leverage*DEPO*procent - Leverage*DEPO*(commission_maker+comission_taker) # –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–µ–ø–æ
        logger(f'–°—Ä–∞–±–æ—Ç–∞–ª —Ç–µ–π–∫! –ó–∞–∫—Ä—ã–ª–∏—Å—å –≤ –ø–ª—é—Å, –¥–µ–ø–æ = {DEPO} –ü—Ä–∏–±—ã–ª—å = {profit} –ö–æ–º–∏—Å—Å–∏—è = {commission}')
        prt(f'{name_bot} - –°—Ä–∞–±–æ—Ç–∞–ª —Ç–µ–π–∫!\n–ó–∞–∫—Ä—ã–ª–∏—Å—å –≤ –ø–ª—é—Å, –¥–µ–ø–æ = {DEPO}\n–ü—Ä–∏–±—ã–ª—å = {profit}\n–ö–æ–º–∏—Å—Å–∏—è = {commission}')
        open_sl = False
    if status == '-': # –µ—Å–ª–∏ –∑–∞–∫—Ä—ã–ª–∏ –≤ –º–∏–Ω—É—Å
        loss = loss + Leverage*DEPO*procent
        commission = commission + Leverage*DEPO*(commission_maker+comission_taker)
        DEPO = DEPO - Leverage*DEPO*procent - Leverage*DEPO*(commission_maker+comission_taker) # –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–µ–ø–æ
        logger(f'–°—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–æ–ø! –ó–∞–∫—Ä—ã–ª–∏—Å—å –≤ –º–∏–Ω—É—Å, –¥–µ–ø–æ = {DEPO} –£–±—ã—Ç–æ–∫ = {loss} –ö–æ–º–∏—Å—Å–∏—è = {commission}')
        prt(f'{name_bot} - –°—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–æ–ø!\n–ó–∞–∫—Ä—ã–ª–∏—Å—å –≤ –º–∏–Ω—É—Å, –¥–µ–ø–æ = {DEPO}\n–£–±—ã—Ç–æ–∫ = {loss}\n–ö–æ–º–∏—Å—Å–∏—è = {commission}')
        open_sl = False

def check_trade(price):
    now_price_trade = price #–ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –º–æ–Ω–µ—Ç—ã
    global count_long_take
    global count_long_loss
    global count_short_take
    global count_short_loss
    if signal_trade == 'long':
        if float(now_price_trade)>float(take_profit_price):
            close_trade('+',TP)
            count_long_take=count_long_take+1
            return 1
        if float(now_price_trade)<float(stop_loss_price):
            count_long_loss = count_long_loss + 1
            close_trade('-',SL)
            return 1
    if signal_trade == 'short':
        if float(now_price_trade)<float(take_profit_price):
            close_trade('+',TP)
            count_short_take = count_short_take+1
            return 1
        if float(now_price_trade)>float(stop_loss_price):
            count_short_loss = count_short_loss + 1
            close_trade('-',SL)
            return 1
# -------------------------------------- –¢–û–†–ì–û–í–õ–Ø --------------------------------------
# -------------------------------------- –°–¢–†–ê–¢–ï–ì–ò–Ø --------------------------------------

def check_if_signal(ohlc,index):
    prepared_df = PrepareDF(ohlc)
    signal="–Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞" # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Å–∏–≥–Ω–∞–ª, –ª–æ–Ω–≥ –∏–ª–∏ —à–æ—Ä—Ç
    i=index-2 # 99 - —Ç–µ–∫—É—â–∞—è —Å–≤–µ—á–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞, 98 - –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–∫—Ä—ã—Ç–∞—è —Å–≤–µ—á–∞, –Ω–∞–º –Ω—É–∂–Ω–æ 97, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∏–∂–Ω—è—è –æ–Ω–∞ –∏–ª–∏ –≤–µ—Ä—Ö–Ω—è—è
    if isHCC(prepared_df,i-1)>0: # –µ—Å–ª–∏ —É –Ω–∞—Å –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º
        if prepared_df['position_in_channel'][i-1]>canal_max: # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–∂–∞—Ç—ã –ª–∏ –º—ã –∫ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –∫–∞–Ω–∞–ª–∞
            if prepared_df['slope'][i-1]>corner_short: # —Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫–æ–π —É –Ω–∞—Å –Ω–∞–∫–ª–æ–Ω –≥—Ä–∞—Ñ–∏–∫–∞
                signal='short'
    if isLCC(prepared_df,i-1)>0: # –µ—Å–ª–∏ —É –Ω–∞—Å –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
        if prepared_df['position_in_channel'][i-1]<canal_min: # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–∂–∞—Ç—ã –ª–∏ –º—ã –∫ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –∫–∞–Ω–∞–ª–∞
            if prepared_df['slope'][i-1]<corner_long: # —Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫–æ–π –Ω–∞–∫–ª–æ–Ω –≥—Ä–∞—Ñ–∏–∫–∞
                signal='long'
    return signal
    
# -------------------------------------- –°–¢–†–ê–¢–ï–ì–ò–Ø --------------------------------------

def get_price_now_coin(symbol):
    key = "https://api.binance.com/api/v3/ticker/price?symbol="+symbol
    data = requests.get(key)   
    data = data.json() 
    price = data['price']
    return price
     
async def websocket_trade():
    url = 'wss://stream.binance.com:9443/stream?streams='+symbol.lower()+'@miniTicker'
    async with websockets.connect(url) as client: #–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –Ω–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–º, –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        while True:
            data = json.loads(await client.recv())['data']
            print(data['c'])
            if check_trade(data['c']): # —Å–ª–µ–¥–∏–º –∑–∞ –º–æ–Ω–µ—Ç–æ–π, –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–ø –∏ —Å–ª
                break

# -------------------------------------- –ü–µ—Ä–µ–±–æ—Ä –ø–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—É --------------------------------------

while True:
    try:     
        sost_trading = '–î–µ–ø–æ–∑–∏—Ç = '+str(DEPO)+'| –°–¥–µ–ª–∫–∏ –≤ –ø–ª—é—Å –ø—Ä–∏–Ω–µ—Å–ª–∏ '+str(profit)+'| –°–¥–µ–ª–∫–∏ –≤ –º–∏–Ω—É—Å –ø—Ä–∏–Ω–µ—Å–ª–∏ '+str(loss)+'| –ù–∞ –∫–æ–º–∏—Å—Å–∏—é –ø–æ—Ç—Ä–∞—Ç–∏–ª '+str(commission)
        if open_sl == False:
            for x,result in enumerate(coin_mas_10):
                print(result)
                prices = get_futures_klines(result,TF,volume)
                trend = check_if_signal(prices,volume)
                time.sleep(2) # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ 10 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –±–∏–Ω–∞–Ω—Å –Ω–µ –¥–æ–ª–±–∏—Ç—å
                if trend != '–Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞':
                    symbol = result
                    print(f'–ú–æ–Ω–µ—Ç–∞ —Å —Å–∏–≥–Ω–∞–ª–æ–º - {symbol}')
                    break
            # trend = 'long'
            # symbol = 'UMAUSDT'
            if trend == "–Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞":
                logger(time.strftime("%d.%m.%Y –≥. %H:%M", time.localtime()) + ' - –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞')
                time.sleep(wait_time*2) # –î–≤–æ–π–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞
            else:
                print(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–µ—Ç—ã - {symbol}')
                price__now = get_price_now_coin(symbol)
                open_position(trend,get_trade_volume(price__now),price__now) # –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏–≥–Ω–∞–ª –∏ –º—ã –Ω–µ —Å—Ç–æ–∏–º –≤ –ø–æ–∑–∏—Ü–∏–∏, —Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        if open_sl == True:
            loop = asyncio.get_event_loop()
            loop.run_until_complete(websocket_trade())
        if DEPO < 0:
            logger('–ë–æ—Ç —Å–ª–∏–ª –≤—Å—ë –¥–µ–ø–æ! –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞')
            logger(sost_trading)
            logger(f'–ë–æ—Ç {name_bot} —Å–ª–∏–ª –≤—Å—ë –¥–µ–ø–æ! –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞') #
            break
    except KeyboardInterrupt: #
        logger(f'\n–°–±–æ–π –≤ —Ä–∞–±–æ—Ç–µ {name_bot}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.') #
        logger(sost_trading)
        logger(f'–í –ø–ª—é—Å –∑–∞–∫—Ä—ã–ª–∏ –ª–æ–Ω–≥–æ–≤ - {count_long_take}, —à–æ—Ä—Ç–æ–≤ - {count_short_take}')
        logger(f'–í –º–∏–Ω—É—Å –∑–∞–∫—Ä—ã–ª–∏ –ª–æ–Ω–≥–æ–≤ - {count_long_loss}, —à–æ—Ä—Ç–æ–≤ - {count_short_loss}')
        prt(sost_trading)
        prt(f'–í –ø–ª—é—Å –∑–∞–∫—Ä—ã–ª–∏ –ª–æ–Ω–≥–æ–≤ - {count_long_take}, —à–æ—Ä—Ç–æ–≤ - {count_short_take}')
        prt(f'–í –º–∏–Ω—É—Å –∑–∞–∫—Ä—ã–ª–∏ –ª–æ–Ω–≥–æ–≤ - {count_long_loss}, —à–æ—Ä—Ç–æ–≤ - {count_short_loss}')
        exit() 


















